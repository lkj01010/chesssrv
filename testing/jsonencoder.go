package main
import (
	"encoding/json"
	"fmt"
)

//type Component struct {
//	PrimaryNumber string `json:"primary_number"`
//}

type AutoGenerated struct {
	InputIndex int `json:"input_index"`
	Components []  struct {
		PrimaryNumber string `json:"primary_number"`
	} `json:"components"`
	//	Components []Component    `json:"components"`
}

func Test1() {
	jsonstr := []byte(`{
		"input_index":1,
		"components":[
			{"primary_number":"fjfjfjfjf"},
			{"primary_number":"nnn2"}
		]
	}`)
	var ag AutoGenerated
	c := json.Unmarshal(jsonstr, &ag)
	if c != nil {
		fmt.Printf(c.Error())
	}
	fmt.Printf("\nag is %+v \n", ag)
}


func Test2() {
	type stru2 struct {
		InputIndex int `json:"input_index"`
		Components string `json:"components"`
	}

	stru2inst := stru2{InputIndex:3, Components: "small"}
	jsonstr2, _ := json.Marshal(stru2inst)
	fmt.Printf("jsonstr2 is %#v \n", string(jsonstr2))
	var st stru2
	d := json.Unmarshal([]byte(jsonstr2), &st)
	if d != nil {
		fmt.Errorf("unmarshal error: %#v \n", d)
		return
	}
	fmt.Printf("d is %#v \n", st)
}

func Test3() {
	var jsonBlob = []byte(`[
		{"Name": "Platypus", "Order": "Monotremata", "inn":[{"id":"xxx"}, {"id":"1"}]},
		{"Name": "Quoll",    "Order": "Dasyuromorphia", "Inn":[{"id":"xxx"}, {"id":"1"}]}
	]`)
	type inner struct {
		Id string    `json "id"`
	}
	type Animal struct {
		Name  string
		Order string
		Inn   []inner
	}
	var animals []Animal
	err := json.Unmarshal(jsonBlob, &animals)
	if err != nil {
		fmt.Println("error:", err)
	}
	fmt.Printf("%+v", animals)
}

func main() {
	Test1()
	//	test2()
	//	Test3()
}